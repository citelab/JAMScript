C {
    Source          = External_decl*

    // Helper Rules
    identStart      = letter | "_"
    identPart       = identStart | decimalDigit
    linebreak       = "\n"

    comment         = "//" (~linebreak any)* &linebreak
                    | "/*" (~"*/" any)* "*/"

    space           += comment
    spacesNoNl      = (~linebreak space)*

    // Preprocessor will output line markers when compiled with debug options
    Preprocess_line = "#" decimalIntegerLiteral "\"" (~"\"" any)* "\"" decimalIntegerLiteral*

    identName       = identStart identPart*
    identifier      = ~keyword identName

    // Numeric Literals
    hex             = ( "0x" | "0X" ) hexDigit+ ("u"|"U")? ("l"|"L")? ("l"|"L")?

    // hexDigit defined in Ohm"s built-in rules (otherwise: hexDigit = "0".."9" | "a".."f" | "A".."F")



    decimalIntegerLiteral      = nonZeroDigit decimalDigit*                             -- Full
                               | "0"                                                    -- Zero

    decimalDigit    = "0".."9"
    nonZeroDigit    = "1".."9"

    expPart         = ("e" | "E") ("+" | "-")? digit+

    octal           = "0" octalDigit+ ("l"|"L")?

    octalDigit      = "0".."7"

    decimal         = decimalValue ("l"|"L")
                    | decimalValue ("f"|"F")?

    decimalValue    = "-"? decimalIntegerLiteral expPart                                -- IntOnly
                    | "-"? decimalIntegerLiteral? "." digit+ expPart?                   -- Decimal

    integer         = "-"? decimalIntegerLiteral ("l"|"L"|"u"|"U")*

    charLit         = "L"? "'" "\\" octalDigit octalDigit? octalDigit? "\'"                  -- Octal
                    | "L"? "'" "\\" "x" (~"'" hexDigit)+ "'"                                 -- Hex
                    | "L"? "'" escapeChar "'"                                                -- Escape
                    | "L"? "'" (~"'" any)* "'"                                               -- Char

    numericLiteral  = charLit | hex | octal | decimal | integer

    // String Literals
    escapeChar      = "\\" letter

    interStringQuotation = "\"" space* "\""

    stringLiteral   = "L"? "\"" (escapeChar | interStringQuotation | ~"\"" any)* "\""        -- String
                    | ("#" | "`") identName                                                  -- Id


    // Expressions: Ambiguous grammar, but Ohm will prioritize the first match
    Expr            = Assign_expr
                    | NonemptyListOf<Assign_expr, ",">                                  -- list


    Assign_expr     = Unary_expr ( "=" | "*=" | "/=" | ">>=" | "<<=" | "+=" | "-="| "%=" | "&=" | "|=" | "^=" ) Assign_expr          -- assign
                    | Cond_expr

    Cond_expr       = Lor_expr "?" Expr ":" Cond_expr                                   -- cond
                    | Lor_expr


    // Binary operations
    Lor_expr        = Lor_expr "||" Lar_expr                                            -- lor
                    | Lar_expr
    Lar_expr        = Lar_expr "&&" Ior_expr                                            -- lar
                    | Ior_expr
    Ior_expr        = Ior_expr "|" Xor_expr                                             -- ior
                    | Xor_expr
    Xor_expr        = Xor_expr "^" And_expr                                             -- xor
                    | And_expr
    And_expr        = And_expr (~"&&" "&") Eq_expr                                      -- and
                    | Eq_expr
    Eq_expr         = Eq_expr ( "==" | "!=" ) Rel_expr                                  -- eq
                    | Rel_expr
    Rel_expr        = Rel_expr ( "<=" | "<" | ">=" | ">") Shift_expr                    -- rel
                    | Shift_expr
    Shift_expr      = Shift_expr ( "<<" | ">>" ) Add_expr                               -- shift
                    | Add_expr
    Add_expr        = Add_expr ( "+" | "-" ) Mult_expr                                  -- add
                    | Mult_expr
    Mult_expr       = Mult_expr ( "*" | "/" | "%" ) Prefix_expr                         -- mult
                    | Prefix_expr


    // Unary operators

    Prefix_expr     = ( "++" | "--" ) spacesNoNl Unary_expr                             -- Unary
                    | Cast_expr
                    | Unary_expr

    Unary_expr      = ( "&" | "*" | "+" | "-" | "~" | "!" ) Prefix_expr                 -- Prefix
                    | sizeof Unary_expr                                                 -- Sizeof
                    | sizeof "(" Type_name ")"                                          -- SizeofBracketed
                    | Postfix_expr

    Cast_expr       = "(" Type_name ")" Cast_expr                                       -- Cast
                    | Unary_expr

    Postfix_expr    = Left_expr spacesNoNl ( "++" | "--" )                              -- Postfix
                    | Left_expr

    Left_expr       = Left_expr Call_expr                                               -- Call
                    | Left_expr "[" Expr "]"                                            -- Array
                    | Left_expr "." identifier                                          -- Struct
                    | Left_expr "->" identifier                                         -- Pointer
                    | Primary_expr

    Call_expr       = "(" ListOf<Assign_expr, ","> ")"

    Primary_expr    = stringLiteral
                    | identifier
                    | numericLiteral
                    | "(" Expr ")"                                                      -- GroupExpr

    Const_expr      = Cond_expr

    // Declaration statements
    // Statements that do "type" specification
    Prototype       = extern Pointer_list? identifier "(" Param_type_lst ")" Gcc_attribute? ";"
                    | Decl_specs Pointer_list? identifier "(" Param_type_lst ")" Gcc_attribute? ";"

    Decl            = Decl_specs Init_decl_lst ";"                                      -- Decl

    Decl_specs      = (Store_cl_spec | Func_spec | type_qualifier | Gcc_decl_spec)* Type_spec (Store_cl_spec | Func_spec | type_qualifier | Gcc_decl_spec)*
                    | ("(" | Gcc_attribute)* Type_spec (")" | Gcc_attribute)*

    Init_decl_lst   = ListOf<Init_decl, ",">

    Init_decl       = Declarator "=" Initializer                                        -- Init
                    | Declarator                                                        -- NonInit

    Type_name       = Spec_qual_list Abs_declarator?

    Store_cl_spec   = typedef
                    | extern
                    | static
                    | auto
                    | register

    Type_modifier   = (long | short | signed | unsigned)+

    Type_spec       = Type_modifier (int | char | double)?                              -- Modified
                    | (identifier | void | bool | float | int | char | double)
                    | Enum_spec                                                         -- Enum
                    | Struct_spec                                                       -- Sturct
                    | Union_spec                                                        -- Union

    Struct_spec     = struct Gcc_attribute* identifier "{" Struct_decl+ "}"             -- Full
                    | struct Gcc_attribute* identifier                                  -- Empty
                    | struct Gcc_attribute* "{" Struct_decl+ "}"                        -- Anonymous

    Union_spec      = union Gcc_attribute* identifier "{" Struct_decl+ "}"              -- Full
                    | union Gcc_attribute* identifier                                   -- Empty
                    | union Gcc_attribute* "{" Struct_decl+ "}"                         -- Anonymous

    Struct_decl     = Preprocess_line? Spec_qual_list ListOf<Sdeclarator, ","> ";"      -- Full
                    | Preprocess_line                                                   -- Preprocess

    Spec_qual_list  = (type_qualifier | Gcc_decl_spec)* Type_spec type_qualifier*

    Sdeclarator     = Declarator ":" Const_expr Gcc_attribute*                          -- DeclExpr
                    | Declarator                                                        -- Decl
                    | ":" Const_expr Gcc_attribute*                                     -- Expr

    Enum_spec       = enum Gcc_attribute* identifier "{" ListOf<Enumerator, ","> ","? "}"   -- Full
                    | enum Gcc_attribute* identifier                                    -- Empty
                    | enum Gcc_attribute* "{" ListOf<Enumerator, ","> ","? "}"          -- Anonymous

    Enumerator      = Preprocess_line? identifier "=" Const_expr                        -- IdExpr
                    | Preprocess_line? identifier                                       -- Id
                    | Preprocess_line                                                   -- Preprocess


    type_qualifier  = const
                    | restrict
                    | volatile

    Declarator      = Pointer_list? Dir_declarator Gcc_asm_expr? Gcc_attribute*

    Dir_declarator  = Dir_declarator Pmember_decl                                       -- PMember
                    | Dir_declarator Pcall_decl                                         -- PCall
                    | "(" Gcc_attribute* Declarator ")"                                 -- Declarator
                    | identifier                                                        -- Id


    Abs_declarator  = Pointer_list Dir_abs_declarator Gcc_asm_expr? Gcc_attribute*      -- PointerListDADecl
                    | Pointer_list Gcc_asm_expr? Gcc_attribute*                         -- PointerList
                    | Dir_abs_declarator Gcc_asm_expr? Gcc_attribute*                   -- DADecl

    Dir_abs_declarator  = Dir_abs_declarator? "[" Const_expr? "]"                       -- ConstExpr
                        | Dir_abs_declarator? "(" Param_type_lst ")"                    -- ParamTypeList
                        | "(" Gcc_attribute* Abs_declarator ")"                         -- AbsDecl

    Pmember_decl    = "[" Gcc_array_type_modifier* Const_expr? "]"

    Pcall_decl      = "(" Param_type_lst ")"                                            -- ParamTypeList
                    | "(" Ident_list ")"                                                -- IdentList

    Pointer         = "*" type_qualifier*

    Pointer_list    = Pointer+

    Ident_list      = NonemptyListOf<identifier, ",">

    Param_type_lst  = NonemptyListOf<Param_decl, ","> "," var_args                      -- VarArgs
                    | ListOf<Param_decl, ",">                                           -- ConArgs

    var_args        = "..."

    Param_decl      = Decl_specs Declarator                                             -- Declarator
                    | Decl_specs Abs_declarator                                         -- AbsDeclarator
                    | Decl_specs

    Initializer     = "{" ListOf<Init_field, ","> ","? "}"                              -- list
                    | Assign_expr

    Init_field      = (Desig_field)+ "=" Initializer                                    -- Designated
                    | Initializer

    Desig_field    = "." identifier                                                     -- Struct
                   | "[" Assign_expr ("..." Assign_expr)? "]"                           -- Array

    // GCC Statements

    Gcc_decl_spec   = Gcc_attribute
                    | gcc_ext_spec

    Gcc_attribute   = attribute__ "(" "(" (~(")" ")") any)* ")" ")"+

    gcc_ext_spec    = extension

    Func_spec       = inline
                    | msvs_func_spec

    msvs_func_spec  = inline__

    Gcc_array_type_modifier = type_qualifier
                            | Gcc_attribute

    Gcc_asm_stmt    = Gcc_asm_expr ";"

    Gcc_asm_expr    = asm type_qualifier? "(" (~")" any)* ")"+

    // C Statements

    Stmt            = Labeled_stmt
                    | Compound_stmt
                    | Selection_stmt
                    | Iteration_stmt
                    | Jump_stmt
                    | Expr_stmt
                    | Gcc_asm_stmt

    Expr_stmt       = Expr? ";"

    Labeled_stmt    = Label_stmt | Case_stmt | Default_stmt
    Label_stmt      = identifier ":" Stmt
    Case_stmt       = case Const_expr ":" Stmt
    Default_stmt    = default ":" Stmt

    Compound_stmt   =  "{" (Stmt|Decl)* "}" ";"?

    Selection_stmt  = If_stmt | Switch_stmt
    If_stmt         = if "(" Expr ")" Stmt (else Stmt)?
    Switch_stmt     = switch "(" Expr ")" Stmt

    Iteration_stmt  = While_stmt | DoWhile_stmt | For_stmt
    While_stmt      = while "(" Expr ")" Stmt
    DoWhile_stmt    = do Stmt while "(" Expr ")" ";"
    For_stmt        = for "(" (Decl | Expr_stmt) Expr_stmt Expr? ")" Stmt

    Jump_stmt       = Goto_stmt | Continue_stmt | Break_stmt | Return_stmt
    Goto_stmt       = goto identifier ";"
    Continue_stmt   = continue ";"
    Break_stmt      = break ";"
    Return_stmt     = return Expr? ";"

    External_decl   = Function_def
                    | Prototype
                    | Decl
                    | Preprocess_line

    Function_def    = Decl_specs Declarator Compound_stmt                           -- Function

    keyword         =  attribute__ | asm | auto | based | bool | break | case
                    | cdecl | char | const | continue | default | do | double
                    | else | enum | extension | extern | fascall | float | for
                    | forceinline | goto | if | inline | inline__ | int | long
                    | restrict | register | return | short | signed | sizeof
                    | static | stdcall | struct | switch | typedef | union
                    | unsigned | void | volatile | while

    // Convenience rules for parsing keyword tokens.
    attribute__ = "__attribute__" ~identPart
    asm = ("__asm__" | "__asm") ~identPart
    auto = "auto" ~identPart
    based = "__based" ~identPart
    bool = "_Bool" ~identPart
    break = "break" ~identPart
    case = "case" ~identPart
    cdecl = "__cdecl" ~identPart
    char = "char" ~identPart
    const = "const" ~identPart
    continue = "continue" ~identPart
    default = "default" ~identPart
    do = "do" ~identPart
    double = "double" ~identPart
    else = "else" ~identPart
    enum = "enum" ~identPart
    extension = "__extension__" ~identPart
    extern = "extern" ~identPart
    fascall = "__fascall" ~identPart
    float = "float" ~identPart
    for = "for" ~identPart
    forceinline = "__forceinline" ~identPart
    goto = "goto" ~identPart
    if = "if" ~identPart
    inline = "inline" ~identPart
    inline__ = ("__inline__" | "__inline") ~identPart
    int = "int" ~identPart
    long = "long" ~identPart
    register = "register" ~identPart
    restrict = ("restrict" | "__restrict__" | "__restrict") ~identPart
    return = "return" ~identPart
    short = "short" ~identPart
    signed = "signed" ~identPart
    sizeof = "sizeof" ~identPart
    static = "static" ~identPart
    stdcall = "__stdcall" ~identPart
    struct = "struct" ~identPart
    switch = "switch" ~identPart
    typedef = "typedef" ~identPart
    union = "union" ~identPart
    unsigned = "unsigned" ~identPart
    void = "void" ~identPart
    volatile = "volatile" ~identPart
    while = "while" ~identPart
}
