JAMC <: C {
    Source          := External_decl+

    Jcond_specifier = "{" identifier "}"

    Async_prototype = jasync identifier "(" Jamparam_type_lst ")" ";"

    Sync_prototype  = jsync Jamtype_return identifier "(" Jamparam_type_lst ")" ";"

    Async_task      = jasync Jcond_specifier? Jtask_attr_spec? identifier "(" Jamparam_type_lst ")" Compound_stmt

    Sync_task       = jsync Jamtype_return Jcond_specifier? Jtask_attr_spec? identifier "(" Jamparam_type_lst ")" Compound_stmt

    Jtask_attr_spec = "[" NonemptyListOf<Jtask_attr, ",">  ","? "]"

    booleanLiteral  = true | false

    Jtask_attr      = reuse "=" ( default | (~default identifier) )
                    | reuse_history "=" decimalIntegerLiteral
                    | retry "=" decimalIntegerLiteral
                    | timeout "=" decimalValue

    Jamtype_return  = Jamtype "[" decimalIntegerLiteral "]"            -- Array
                    | void                                             -- Void
                    | Jamtype

    Jamtype         = unsigned? int                                    -- Int
                    | unsigned? long long int?                         -- LongLongInt
                    | long unsigned long int?                          -- LongUnsignedLongInt
                    | long long unsigned int?                          -- LongLongUnsignedInt
                    | unsigned? char                                   -- Char
                    | float                                            -- Float
                    | double                                           -- Double
                    | unsigned                                         -- IntUnsigned

    Jamparam_type_lst = ListOf<Jamparam_decl, ",">

    Jamparam_decl   = char "*" identifier                              -- String
                    | Jamtype identifier ( "[" "]" )?                  -- Param

    Decl            += jarray Jamtype Jamarray_dlist<Jarray_size> ";"  -- JamArray
                    |  jlist Jamtype Jamarray_dlist<""> ";"            -- JamList

    Jamarray_dlist<size>  = NonemptyListOf<Jamarray_init<size>, ",">

    Jamarray_init<size>   = identifier size ( "=" Jamarray_val )?

    Jamarray_val    = Initializer_list | stringLiteral

    Param_decl      += jarray Jamtype identifier Jarray_size           -- JamArray
                    |  jlist Jamtype identifier                        -- JamList

    Function_def    += jarray Jamtype Jarray_size identifier Pcall_decl Compound_stmt       -- JamArray
                    |  jlist Jamtype identifier Pcall_decl Compound_stmt                    -- JamList

    Jarray_size     = "[" decimalIntegerLiteral "]"

    Jcond_decl      = ( jcond | jreuse ) "{" Jcond_entry+ "}"

    Jcond_entry     = identifier "(" identifier "," identifier ")" Compound_stmt

    Task_def        = Sync_task
                    | Async_task

    Jamprototype    = Sync_prototype
                    | Async_prototype

    External_decl   += Task_def
                    | Jcond_decl
                    | Jamprototype

    keyword         += jasync | jsync | jarray | jlist | jcond | jreuse

    jasync = "jasync" ~identPart
    jsync = "jsync" ~identPart
    jarray = "jarray" ~identPart
    jlist = "jlist" ~identPart
    jcond = "jcond" ~identPart
    jreuse = "jreuse" ~identPart

    reuse = "reuse" ~identPart
    reuse_history = "reuse_history" ~identPart
    retry = "retry" ~identPart
    timeout = "timeout" ~identPart

    true = "true" ~identPart
    false = "false" ~identPart
}